@using System.Transactions
@using Microsoft.AspNetCore.Identity
@using Microsoft.IdentityModel.Tokens
@model IEnumerable<CareHub.Models.Posts>
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Índice";
    var currentUser = await UserManager.GetUserAsync(User);
    var isAdmin = currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Administrador");
}

<head>
    <title>Índice</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
</head>

<div class="container mt-4">
    <h1 class="text-center mb-4">Publicações do Fórum</h1>

    <div class="text-center mb-4">
        <a class="btn btn-outline-secondary" asp-action="Criar">Criar nova publicação</a>
    </div>

    @foreach (var item in Model)
    {
        <div class="card mb-4 shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <img src="@item.Utilizador.Foto" alt="Foto do utilizador" class="rounded-circle me-3" width="50" height="50" />
                    <strong>@item.Utilizador.Nome</strong>
                </div>

                <h5 class="card-title">@item.TituloPost</h5>
                <h6 class="card-subtitle mb-2 text-muted">@item.Categoria</h6>
                <p class="card-text">@item.TextoPost</p>

                @if (!string.IsNullOrEmpty(item.Foto))
                {
                    <img src="@item.Foto" alt="Imagem da publicação" class="img-fluid rounded mb-3" style="max-width: 100%;" />
                }
                 
                <div class="d-flex align-items-center mb-2">
                    <button id="like-button-@item.IdPost" 
                            class="btn @(item.ListaUp?.Any(up => up.Utilizador.IdentityUserName == currentUser?.UserName) == true ? "btn-success" : "btn-outline-secondary") btn-sm me-2" 
                    onclick="AtualizarUpvotes(@item.IdPost)">
                <i class="bi bi-arrow-up"></i></button>

                     <span id="upvote-count-@item.IdPost">@item.ListaUp.Count</span>
</div>


                
                <p class="text-muted">@item.DataPost.ToShortDateString()</p>

                <div>
                    <a class="btn btn-sm btn-outline-secondary me-2" asp-action="Detalhes" asp-route-id="@item.IdPost">Detalhes</a>

                    @if (item.Utilizador.IdentityUserName == User.Identity.Name || isAdmin)
                    {
                        <a class="btn btn-sm btn-outline-primary me-2" asp-action="Editar" asp-route-id="@item.IdPost">Editar</a>
                        <a class="btn btn-sm btn-outline-danger" asp-action="Delete" asp-route-id="@item.IdPost">Apagar</a>
                    }
                </div>
                
                <div  class="mt-3" >
                    <div class="input-group">
                        <textarea class="form-control rounded-pill" id="textoComentario-@item.IdPost"
                                    name="TextoCom" placeholder="Escreva um comentário" required style="resize: none; 
                      overflow: hidden; height: 50px;" oninput="this.style.height=''; this.style.height= this.scrollHeight + 'px'"></textarea>
                        <input type="hidden"  id="IdPost-@item.IdPost" value="@item.IdPost" />
                        <button  class="btn btn-primary rounded-pill" onclick="EnviarComentario(@item.IdPost)">Comentar</button>
                    </div>
                </div>
                
                
                <div id="comentarioTemplate-@item.IdPost" class="d-flex align-items-start mb-2" style="display:none;">
                    <img class="rounded-circle me-3" width="50" height="50" style="display: none;"/>
                    <div class="flex-grow-1">
                        <strong style="margin-top: 0; display: block;"></strong>
                        <p style="margin-top: 10px; margin-bottom: 0;"></p>
                    </div>
                    <div class="d-flex flex-column align-items-end" style="margin-left: auto;">
                        <small class="text-muted"></small>
                        <div id="deleteBtn">
                                   
                        </div>
                        <button class="btn btn-sm btn-outline-danger mt-1" style="display: none">Delete</button>
                    </div>
                </div>
                
                <div id="semComentarioTemplate-@item.IdPost" style="display: none" class="mb-2">
                    <p class="text-muted">Ainda sem comentários. Sê o primeiro</p>
                </div>
                
                <div id="listaComentarios-@item.IdPost" class="text-muted mt-2">
                   @if (item.ListaComentarios?.Any() != true)
                   {
                       <div id="semComentarios-@item.IdPost" class="mb-2">
                           <p class="text-muted">Ainda sem comentários. Sê o primeiro</p>
                       </div>

                   }
                   else
                   {
                       
                       @foreach (var comentario in item.ListaComentarios)
                       {
                           <div id="comentario-@comentario.IdCom" class="d-flex align-items-start mb-2">
                               <img src="@comentario.Utilizador.Foto" alt="Foto do utilizador" class="rounded-circle me-3" width="50" height="50" />

                               <div class="flex-grow-1">
                                   <strong style="margin-top: 0; display: block;">@comentario.Utilizador.Nome</strong>
                                   <p style="margin-top: 10px; margin-bottom: 0;">@comentario.TextoCom</p>
                               </div>
                                
                                
                               <div class="d-flex flex-column align-items-end" style="margin-left: auto;">
                                   <small class="text-muted">@comentario.DataCom.ToString("dd-MM-yyyy")</small>
                                   
                                   @if (comentario.Utilizador.IdentityUserName == User.Identity.Name || isAdmin)
                                   {
                                       <button class="btn btn-sm btn-outline-danger mt-1" onclick="ComentarioApagar(@comentario.IdCom,@comentario.Utilizador.IdUtil, @comentario.IdPost)">Delete</button>
                                   }
                                   
                               </div>
                           </div>

                       }
                   }
                </div>
            </div>
        </div>
    }
</div>



<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/UpSocket")
        .withAutomaticReconnect()
        .configureLogging(signalR.LogLevel.Information)
        .build();

    

    
    
    async function start() {
    try {
        await connection.start();
        console.log("SignalR Connected.");

        connection.on("Erro", (mensagem) => {
            alert(mensagem);
        });
        
        connection.on("AtualizarUpvotes", (idPub, upvotes) => {
            document.getElementById(`upvote-count-${idPub}`).innerText = upvotes;
        });

        connection.on("AtualizarUpvotesPersonal", (idPub, isLike) => {

            if(isLike){
                document.getElementById(`like-button-${idPub}`).className = "btn btn-success btn-sm me-2";
            }else{
                document.getElementById(`like-button-${idPub}`).className = "btn btn-outline-secondary btn-sm me-2";
            }

        });

            connection.on("ComentarAtualizar",(comentarioFromHub, foto, nome, data)=> {

                //console.log(comentarioFromHub);
                //console.log(foto);
                //console.log(nome);
                //console.log(data);
                var comentario = JSON.parse(comentarioFromHub);
                
                var postId = comentario.IdPost;

                var divTemplate = document.getElementById(`comentarioTemplate-${postId}`);
                var divComentarios = document.getElementById(`listaComentarios-${postId}`);

                if (!divTemplate ) {
                    console.error("Template or comment list not found for post:", postId);
                    return;
                }

                let clone = divTemplate.cloneNode(true);
                
                clone.id = `comentario-${comentario.IdCom}`;
                clone.style.display = "flex";
                clone.querySelector("img").style.display = "block";
                clone.querySelector("img").src = foto;
                clone.querySelector("strong").textContent = nome;
                clone.querySelector("p").textContent = comentario.TextoCom;
                clone.querySelector("small").textContent = data;
                clone.querySelector("button").onclick = () => ComentarioApagar(comentario.IdCom,comentario.Utilizador.IdUtil,comentario.IdPost);
                clone.querySelector("button").style.display = "block";
                
                if(document.getElementById(`semComentarios-${postId}`) != null){
                    document.getElementById(`semComentarios-${postId}`).remove();
                }
                
                divComentarios.appendChild(clone);
                
            });



        } catch (err) {
        
        setTimeout(start, 5000);
        }
    }
    
    function AtualizarUpvotes(idPub){
        connection.invoke("AtualizarUpvotes", idPub).catch(err => {
            const errorMessage = err.toString();

            if (errorMessage.includes("unauthorized")) {
                alert("Você precisa estar logado para dar gosto.");
            } else {
                console.error(errorMessage);
                alert("Ocorreu um erro ao atualizar os gostos.");
            }
        });
        
    }

    function EnviarComentario(idPost) {
        const texto = document.getElementById(`textoComentario-${idPost}`).value;
        if (texto.trim() === "") {
            alert("Escreve algo antes de comentar!");
            return;
        }

        const comentario = {
            TextoCom: texto,
            IdPost: idPost
        };

        connection.invoke("Comentar", comentario)
            .then(() => {
                
                document.getElementById(`textoComentario-${idPost}`).value = '';
            })
            .catch(err => {
                const errorMessage = err.toString();

                if (errorMessage.includes("unauthorized")) {
                    alert("Você precisa estar logado para comentar.");
                } else {
                    console.error(errorMessage);
                    alert("Ocorreu um erro ao atualizar o comentário.");
                }
            });
    }
    
    function ComentarioApagar(idCom, idUtil, idPost){
        connection.invoke("ApagarComentario", idCom, idUtil)
            .then(() => {

            document.getElementById(`comentario-${idCom}`).remove();
            
            const quantidade = document.querySelectorAll(`#listaComentarios-${idPost} p`).length;
            console.log("Quantidade de comentários:", quantidade);


                if (quantidade == 0 || quantidade == undefined || quantidade == null) {

                if(document.getElementById(`semComentarios-${idPost}`) == null){
                    var divComentarios = document.getElementById(`listaComentarios-${idPost}`);
                    var semComentarioTemplate = document.getElementById(`semComentarioTemplate-${idPost}`);
                    let clone = semComentarioTemplate.cloneNode(true);

                    clone.id = `semComentarios-${idPost}`;
                    clone.style.display = "flex";

                    divComentarios.appendChild(clone);
                }
                
                
            }
            
        })
            .catch(err => {
                console.error(err.toString());
                alert("Ocorreu um erro ao apagar o comentário");
            });

        
    }
    
    // Start the connection.
    start();
</script>
