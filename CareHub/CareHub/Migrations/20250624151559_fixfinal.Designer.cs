// <auto-generated />
using System;
using CareHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CareHub.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250624151559_fixfinal")]
    partial class fixfinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("CareHub.Models.Comentarios", b =>
                {
                    b.Property<int>("IdCom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DataCom")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdPost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUtil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextoCom")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("IdCom");

                    b.HasIndex("IdPost");

                    b.HasIndex("IdUtil");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("CareHub.Models.Doutores", b =>
                {
                    b.Property<int>("IdDoutor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistritoProfissional")
                        .HasColumnType("TEXT");

                    b.Property<string>("Especialidade")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdUtil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<int>("nCedula")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdDoutor");

                    b.HasIndex("IdUtil")
                        .IsUnique();

                    b.ToTable("Doutores");
                });

            modelBuilder.Entity("CareHub.Models.Formularios", b =>
                {
                    b.Property<int>("IdForm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUtil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<string>("nome")
                        .HasColumnType("TEXT");

                    b.Property<bool>("presencial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("regiao")
                        .HasColumnType("TEXT");

                    b.Property<int>("telefone")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdForm");

                    b.HasIndex("IdUtil");

                    b.ToTable("Formularios");
                });

            modelBuilder.Entity("CareHub.Models.Pacientes", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUtil")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdPaciente");

                    b.HasIndex("IdUtil")
                        .IsUnique();

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("CareHub.Models.Posts", b =>
                {
                    b.Property<int>("IdPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DataPost")
                        .HasColumnType("TEXT");

                    b.Property<string>("Foto")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdUtil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextoPost")
                        .HasColumnType("TEXT");

                    b.Property<string>("TituloPost")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("IdPost");

                    b.HasIndex("IdUtil");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CareHub.Models.Up", b =>
                {
                    b.Property<int>("IdUtil")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPost")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdUtil", "IdPost");

                    b.HasIndex("IdPost");

                    b.ToTable("Ups");
                });

            modelBuilder.Entity("CareHub.Models.Utilizadores", b =>
                {
                    b.Property<int>("IdUtil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Foto")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentityRole")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentityUserName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Regiao")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT");

                    b.HasKey("IdUtil");

                    b.ToTable("Utilizadores");

                    b.HasData(
                        new
                        {
                            IdUtil = 1,
                            IdentityRole = "Administrator",
                            IdentityUserName = "admin@mail.pt",
                            Nome = "Administrador"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b983cc1c-6314-40e1-a2d5-febdd5f4ad09",
                            Email = "admin@mail.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.PT",
                            NormalizedUserName = "ADMIN@MAIL.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEPpYsr6Ad3xHOROwVBek95Hko94p0Uz9TpsKlN7K4wqTZ+o3chA8NPpOsTTVmJGSqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "640e385a-25e9-48fa-868a-15ec770caf34",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.pt"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            RoleId = "a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CareHub.Models.Comentarios", b =>
                {
                    b.HasOne("CareHub.Models.Posts", "Post")
                        .WithMany("ListaComentarios")
                        .HasForeignKey("IdPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareHub.Models.Utilizadores", "Utilizador")
                        .WithMany("ListaComentarios")
                        .HasForeignKey("IdUtil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("CareHub.Models.Doutores", b =>
                {
                    b.HasOne("CareHub.Models.Utilizadores", "Utilizador")
                        .WithOne("Doutor")
                        .HasForeignKey("CareHub.Models.Doutores", "IdUtil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("CareHub.Models.Formularios", b =>
                {
                    b.HasOne("CareHub.Models.Utilizadores", "Utilizador")
                        .WithMany()
                        .HasForeignKey("IdUtil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("CareHub.Models.Pacientes", b =>
                {
                    b.HasOne("CareHub.Models.Utilizadores", "Utilizador")
                        .WithOne("Paciente")
                        .HasForeignKey("CareHub.Models.Pacientes", "IdUtil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("CareHub.Models.Posts", b =>
                {
                    b.HasOne("CareHub.Models.Utilizadores", "Utilizador")
                        .WithMany("ListaPosts")
                        .HasForeignKey("IdUtil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("CareHub.Models.Up", b =>
                {
                    b.HasOne("CareHub.Models.Posts", "Post")
                        .WithMany("ListaUp")
                        .HasForeignKey("IdPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareHub.Models.Utilizadores", "Utilizador")
                        .WithMany("ListaUp")
                        .HasForeignKey("IdUtil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareHub.Models.Posts", b =>
                {
                    b.Navigation("ListaComentarios");

                    b.Navigation("ListaUp");
                });

            modelBuilder.Entity("CareHub.Models.Utilizadores", b =>
                {
                    b.Navigation("Doutor");

                    b.Navigation("ListaComentarios");

                    b.Navigation("ListaPosts");

                    b.Navigation("ListaUp");

                    b.Navigation("Paciente");
                });
#pragma warning restore 612, 618
        }
    }
}
